package tmnt.example.onedaily.bean.book;

import java.util.List;

/**
 * Created by tmnt on 2017/4/17.
 */

public class DoubanBookInfo {

    /**
     * count : 10
     * start : 0
     * total : 1309
     * books : [{"rating":{"max":10,"numRaters":1,"average":"0.0","min":0},"subtitle":"Visual QuickStart Guide","author":["Toby Donaldson"],"pubdate":"2013-7-15","tags":[{"count":1,"name":"python入门","title":"python入门"},{"count":1,"name":"计算机","title":"计算机"}],"origin_title":"","image":"https://img3.doubanio.com/mpic/s27175520.jpg","binding":"Paperback","translator":[],"catalog":"","pages":"224","images":{"small":"https://img3.doubanio.com/spic/s27175520.jpg","large":"https://img3.doubanio.com/lpic/s27175520.jpg","medium":"https://img3.doubanio.com/mpic/s27175520.jpg"},"alt":"https://book.douban.com/subject/24133123/","id":"24133123","publisher":"Peachpit Press","isbn10":"0321929551","isbn13":"9780321929556","title":"Python","url":"https://api.douban.com/v2/book/24133123","alt_title":"","author_intro":"","summary":"Python is a remarkably powerful dynamic programming language used in a wide variety of situations such as Web, database access, desktop GUIs, game and software development, and network programming. Fans of Python use the phrase \"batteries included\" to describe the standard library, which covers everything from asynchronous processing to zip files. The language itself is a flexible powerhouse that can handle practically any application domain. This task-based tutorial on Python is for those new to the language and walks you through the fundamentals. You'll learn about arithmetic, strings, and variables; writing programs; flow of control, functions; strings; data structures; input and output; and exception handling. At the end of the book, a special section walks you through a longer, realistic application, tying the concepts of the book together.","price":"USD 34.99"},{"rating":{"max":10,"numRaters":0,"average":"0.0","min":0},"subtitle":"An Introduction to Programming","author":["J. R. Parker"],"pubdate":"2016-11-30","tags":[],"origin_title":"","image":"https://img3.doubanio.com/mpic/s29157682.jpg","binding":"Paperback","translator":[],"catalog":"","pages":"600","images":{"small":"https://img3.doubanio.com/spic/s29157682.jpg","large":"https://img3.doubanio.com/lpic/s29157682.jpg","medium":"https://img3.doubanio.com/mpic/s29157682.jpg"},"alt":"https://book.douban.com/subject/26917066/","id":"26917066","publisher":"Mercury Learning & Information","isbn10":"1944534652","isbn13":"9781944534653","title":"Python","url":"https://api.douban.com/v2/book/26917066","alt_title":"","author_intro":"","summary":"","price":"USD 64.95"},{"rating":{"max":10,"numRaters":0,"average":"0.0","min":0},"subtitle":"Crash Course - The Ultimate Beginner's Course to Learning Python Programming in Under 12 Hours","author":["Eprogramy"],"pubdate":"2015-12-3","tags":[],"origin_title":"","image":"https://img3.doubanio.com/mpic/s28372694.jpg","binding":"Paperback","translator":[],"catalog":"","pages":"134","images":{"small":"https://img3.doubanio.com/spic/s28372694.jpg","large":"https://img3.doubanio.com/lpic/s28372694.jpg","medium":"https://img3.doubanio.com/mpic/s28372694.jpg"},"alt":"https://book.douban.com/subject/26697627/","id":"26697627","publisher":"CreateSpace Independent Publishing Platform","isbn10":"1519639686","isbn13":"9781519639684","title":"Python","url":"https://api.douban.com/v2/book/26697627","alt_title":"","author_intro":"","summary":"","price":"USD 9.99"},{"rating":{"max":10,"numRaters":0,"average":"0.0","min":0},"subtitle":"Visual QuickStart Guide","author":["Toby Donaldson"],"pubdate":"2013-7-1","tags":[],"origin_title":"","image":"https://img1.doubanio.com/mpic/s27175519.jpg","binding":"Printed Access Code","translator":[],"catalog":"","pages":"","images":{"small":"https://img1.doubanio.com/spic/s27175519.jpg","large":"https://img1.doubanio.com/lpic/s27175519.jpg","medium":"https://img1.doubanio.com/mpic/s27175519.jpg"},"alt":"https://book.douban.com/subject/25789709/","id":"25789709","publisher":"Peachpit Press Publications","isbn10":"0133488276","isbn13":"9780133488272","title":"Python","url":"https://api.douban.com/v2/book/25789709","alt_title":"","author_intro":"","summary":"","price":""},{"rating":{"max":10,"numRaters":638,"average":"8.7","min":0},"subtitle":"深度探索动态语言核心技术","author":["陈儒"],"pubdate":"2008-6","tags":[{"count":1401,"name":"python","title":"python"},{"count":525,"name":"编程","title":"编程"},{"count":353,"name":"Python","title":"Python"},{"count":258,"name":"计算机","title":"计算机"},{"count":208,"name":"编译原理","title":"编译原理"},{"count":207,"name":"programming","title":"programming"},{"count":196,"name":"程序语言","title":"程序语言"},{"count":162,"name":"脚本引擎","title":"脚本引擎"}],"origin_title":"","image":"https://img3.doubanio.com/mpic/s3435132.jpg","binding":"平装","translator":[],"catalog":"","ebook_url":"https://read.douban.com/ebook/1499455/","pages":"480","images":{"small":"https://img3.doubanio.com/spic/s3435132.jpg","large":"https://img3.doubanio.com/lpic/s3435132.jpg","medium":"https://img3.doubanio.com/mpic/s3435132.jpg"},"alt":"https://book.douban.com/subject/3117898/","id":"3117898","publisher":"电子工业出版社","isbn10":"7121068745","isbn13":"9787121068744","title":"Python源码剖析","url":"https://api.douban.com/v2/book/3117898","alt_title":"","author_intro":"","summary":"作为主流的动态语言，Python不仅简单易学、移植性好，而且拥有强大丰富的库的支持。此外，Python强大的可扩展性，让开发人员既可以非常容易地利用C/C++编写Python的扩展模块，还能将Python嵌入到C/C++程序中，为自己的系统添加动态扩展和动态编程的能力。.\n为了更好地利用Python语言，无论是使用Python语言本身，还是将Python与C/C++交互使用，深刻理解Python的运行原理都是非常重要的。本书以CPython为研究对象，在C代码一级，深入细致地剖析了Python的实现。书中不仅包括了对大量Python内置对象的剖析，更将大量的篇幅用于对Python虚拟机及Python高级特性的剖析。通过此书，读者能够透彻地理解Python中的一般表达式、控制结构、异常机制、类机制、多线程机制、模块的动态加载机制、内存管理机制等核心技术的运行原理，同时，本书所揭示的动态语言的核心技术对于理解其他动态语言，如 Javascript、Ruby等也有较大的参考价值。..\n本书适合于Python程序员、动态语言爱好者、C程序员阅读","ebook_price":"38.39","price":"69.80元"},{"rating":{"max":10,"numRaters":1451,"average":"7.9","min":0},"subtitle":"","author":["Magnus Lie Hetland"],"pubdate":"2010年7月","tags":[{"count":1628,"name":"python","title":"python"},{"count":797,"name":"编程","title":"编程"},{"count":396,"name":"Python","title":"Python"},{"count":370,"name":"程序设计","title":"程序设计"},{"count":324,"name":"脚本语言","title":"脚本语言"},{"count":322,"name":"计算机","title":"计算机"},{"count":162,"name":"programming","title":"programming"},{"count":147,"name":"软件开发","title":"软件开发"}],"origin_title":"Beginning Python: From Novice to Professional, Second Edition","image":"https://img3.doubanio.com/mpic/s4387251.jpg","binding":"平装","translator":["司维","曾军崴","谭颖华"],"catalog":"第1章 基础知识\n1.1 安装Python\n1.1.1 Windows\n1.1.2 Linux和UNIX\n1.1.3 苹果机（Macintosh）\n1.1.4 其他发布版\n1.1.5 时常关注，保持更新\n1.2 交互式解释器\n1.3 算法是什么\n1.4 数字和表达式\n1.4.1 长整型数\n1.4.2 十六进制和八进制\n1.5 变量\n1.6 语句\n1.7 获取用户输入\n1.8 函数\n1.9 模块\n1.9.1 cmath和复数\n1.9.2 回到future\n1.10 保存并执行程序\n1.10.1 通过命令提示符运行Python脚本\n1.10.2 让脚本像普通程序一样运行\n1.10.3 注释\n1.11 字符串\n1.11.1 单引号字符串和转义引号\n1.11.2 拼接字符串\n1.11.3 字符串表示和repr\n1.11.4 input和rawinpm的比较\n1.11.5 长字符串、原始字符串和Unicode\n1.12 小结\n1.12.1 本章的新函数\n1.12.2 接下来学什么\n第2章 列表和元组\n2.1 序列概览\n2.2 通用序列操作\n2.2.1 索引\n2.2.2 分片\n2.2.3 序列相加\n2.2.4.乘法\n2.2.5 成员资格\n2.2.6 长度、最小值和最大值\n2.3 列表：Python的\u201c苦力\u201d\n2.3.1 list函数\n2.3.2 基本的列表操作\n2.3.3 列表方法\n2.4 元组：不可变序列\n2.4.1 tuple函数\n2.4.2 基本元组操作\n2.4.3 那么，意义何在\n2.5 小结\n2.5.1 本章的新函数\n2.5.2 接下来学什么\n第3章 使用字符串\n3.1 基本字符串操作\n3.2 字符串格式化：精简版\n3.3 字符串格式化：完整版\n3.3.1 简单转换\n3.3.2 字段宽度和精度\n3.3.3 符号、对齐和0填充\n3.4 字符串方法\n3.4.1 f1nd\n3.4.2 join\n3.4.3 jower\n3.4.4 replace\n3.4.5 spl1t\n3.4.6 strlD\n3.4.7 tralqslate\n3.5 小结\n3.5.1 本章的新函数\n3.5.2 接下来学什么\n第4章 字典：当索引不好用时\n4.1 字典的使用\n4.2 创建和使用字典\n4.2.1 dict函数\n4.2.2 基本字典操作\n4.2.3 字典的格式化字符串\n4.2.4 字典方法\n4.3 小结\n4.3.1 本章的新函数\n4.3.2 接下来学什么\n第5章 条件、循环和其他语句\n5.1 print和import的更多信息\n5.1.1 使用逗号输出\n5.1.2 把某件事作为另一件事导入\n5.2 赋值魔法\n5.2.1 序列解包\n5.2.2 链式赋值\n5.2.3 增量赋值\n5.3 语句块：缩排的乐趣\n5.4 条件和条件语句\n5.4.1 这就是布尔变量的作用\n5.4.2 条件执行和if语句\n5.4.3 else子句\n5.4.4 elif子句\n5.4.5 嵌套代码块\n5.4.6 更复杂的条件\n5.4.7 断言\n5.5 循环\n5.5.1 while循环\n5.5.2 for循环\n5.5.3 循环遍历字典元素\n5.5.4 一些迭代工具\n5.5.5 跳出循环\n5.5.6 循环中的else子句\n5.6 列表推导式\u2014\u2014轻量级循环\n5.7 三人行\n5.7.1 什么都没发生\n5.7.2 使用del删除\n5.7.3 使用exec和eval执行和求值字符串\n5.8 小结\n5.8.1 本章的新函数\n5.8.2 接下来学什么\n第6章 抽象\n6.1 懒惰即美德\n6.2 抽象和结构\n6.3 创建函数\n6.3.1 记录函数\n6.3.2 并非真正函数的函数\n6.4 参数魔法\n6.4.1 值从哪里来\n6.4.2 我能改变参数吗\n6.4.3 关键字参数和默认值\n6.4.4 收集参数\n6.4.5 反转过程\n6.4.6 练习使用参数\n6.5 作用域\n6.6 递归\n6.6.1 两个经典：阶乘和幂\n6.6.2 另外一个经典：二元查找\n6.7 小结\n6.7.1 本章的新函数\n6.7.2 接下来学什么\n第7章 更加抽象\n7.1 对象的魔力\n7.1.1 多态\n7.1.2 封装\n7.1.3 继承\n7.2 类和类型\n7.2.1 类到底是什么\n7.2.2 创建自己的类\n7.2.3 特性、函数和方法\n7.2.4 类的命名空间\n7.2.5 指定超类\n7.2.6 调查继承\n7.2.7 多个超类\n7.2.8 接口和内省\n7.3 一些关于面向对象设计的思考\n7.4 简明总结\n7.4.1 本章的新函数\n7.4.2 接下来学什么\n第8章 异常\n8.1 什么是异常\n8.2 按自己的方式出错\n8.2.1 raise语句\n8.2.2 自定义异常类\n8.3 捕捉异常\n8.4 不止一个except子句\n8.5 用一个块捕捉两个异常\n8.6 捕捉对象\n8.7 真正的全捕捉\n8.8 万事大吉\n8.9 最后\n8.10 异常和函数\n8.11 异常之禅\n8.12小结\n8.12.1 本章的新函数\n8.12.2 接下来学什么\n第9章 魔法方法、属性和迭代器\n9.1 准备工作\n9.2 构造方法\n9.2.1 重写一般方法和特殊的构造方法\n9.2.2 调用未绑定的超类构造方法\n9.2.3 使用super、函数\n9.3 成员访问\n9.3.1 基本的序列和映射规则\n9.3.2 子类化列表，字典和字符串\n9.4 更多魔力\n9.5 属性\n9.5.1 property函数\n9.5.2 静态方法和类成员方法\n9.5.3 getattr、setattr和它的朋友们\n9.6 迭代器\n9.6.1 迭代器规则\n9.6.2 从迭代器得到序列\n9.7 生成器\n9.7.1 创建生成器\n9.7.2 递归生成器\n9.7.3 通用生成器\n9.7.4 生成器方法\n9.7.5 模拟生成器\n9.8 八皇后问题\n9.8.1 生成器和回溯\n9.8.2 问题\n9.8.3 状态表示\n9.8.4 寻找冲突\n9.8.5 基本情况\n9.8.6 需要递归的情况\n9.8.7 打包\n9.9 小结\n9.9.1 本章的新函数\n9.9.2 接下来学什么\n第10章 充电时刻\n10.1 模块\n10.1.1 模块是程序\n10.1.2 模块用于定义\n10.1.3 让你的模块可用\n10.1.4 包\n10.2 探究模块\n10.2.1 模块中有什么\n10.2.2 用help获取帮助\n10.2.3 文档\n10.2.4 使用源代码\n10.3 标准库：一些最爱\n10.3.1 sys\n10.3.2 OS\n10.3.3 fileinput\n10.3.4 集合、堆和双端队列\n10.3.5 time\n10.3.6 random\n10.3.7 shelve\n10.3.8 re\n10.3.9 其他有趣的标准模块\n10.4 小结\n10.4.1 本章的新函数\n10.4.2 接下来学什么\n第11章 文件和素材\n11.1 打开文件\n11.1.1 文件模式\n11.1.2 缓冲\n11.2 基本文件方法\n11.2.1 读和写\n11.2.2 管式输出\n11.2.3 读写行\n11.2.4 关闭文件\n11.2.5 使用基本文件方法\n11.3 对文件内容进行迭代\n11.3.1 按字节处理\n11.3.2 按行操作\n11.3.3 读取所有内容\n11.3.4 使用fileinput实现懒惰行迭代\n11.3.5 文件迭代器\n11.4 小结\n11.4.1 本章的新函数\n11.4.2 接下来学什么\n第12章 图形用户界面\n12.1 丰富的平台\n12.2 下载和安装wxpytbon\n12.3 创建示例GUI应用程序\n12.3.1 开始\n12.3.2 窗口和组件\n12.3.3 标签、标题和位置\n12.3.4 更智能的布局\n12.3.5 事件处理\n12.3.6 完成了的程序\n12.4 但是我宁愿用\n12.4..1 使用Tkinter\n12.4.2 使用Jython和Swing\n12.4..3 使用其他开发包\n12.5 小结\n第13章 数据库支持\n13.1 Python数据库API\n13.1.1 全局变量\n13.1.2 异常\n13.1.3 连接和游标\n13.1.4 类型\n13.2 SQLite和PySQLite\n13.2.1 入门\n13.2.2 数据库应用程序示例\n13.3 小结\n13.3.1 本章的新函数\n13.3.2 接下来学什么\n第14章 网络编程\n14.1 少数几个网络设计模块\n14.1.1 socket模块\n14.1.2 urllib和urllib2模块\n14.1.3 其他模块\n14.2 SocketServer和它的朋友们\n14.3 多连接\n14.3.1 使用SocketServer进行分叉和线程处理\n14.3.2 带有select和port的异步I／O\n14.4 Twisted\n14.4.1 下裁并安装Twisted\n14.4.2 编写Twisted服务器\n14.5 小结\n14.5.1 本章的新函数\n14.5.2 接下来学什么\n第15章 Python和万维网\n15.1 屏幕抓取\n15.1.1 Tidy和XHTML解析\n\u2026\u2026\n第16章 测试\n第17章 扩展Python\n第18章 程序打包\n第19章 好玩的编程\n第20章 项目1：即时标记\n第21章 项目2：画幅好画\n第22章 项目3：万能的XML\n第23章 项目4：新闻聚合\n第24章 项目5：虚拟茶话会\n第25章 项目6：使用CGI进行远程编辑\n第26章 项目7：自定义电子公告板\n第27章 项目8：使用XML-RPC进行文件共享\n第28章 项目9：文件共享2\u2014\u2014GUI版本\n第29章 项目10：DIY街机游戏\n附录A 简明版本\n附录B Python参考手册\n附录C 在线资源\n附录D Python3.0","pages":"471","images":{"small":"https://img3.doubanio.com/spic/s4387251.jpg","large":"https://img3.doubanio.com/lpic/s4387251.jpg","medium":"https://img3.doubanio.com/mpic/s4387251.jpg"},"alt":"https://book.douban.com/subject/4866934/","id":"4866934","publisher":"人民邮电出版社","isbn10":"7115230277","isbn13":"9787115230270","title":"Python基础教程","url":"https://api.douban.com/v2/book/4866934","alt_title":"Beginning Python: From Novice to Professional, Second Edition","author_intro":"Magnus Lie Hetland是挪威科技大学副教授，教授算法。喜欢钻研新的编程语言，是Python语言的坚定支持者。他写过很多Python方面的书和在线教程，比如深受大家欢迎的网上教程Instant Python。","summary":"本书是经典教程的全新改版，作者根据Python 3.0版本的种种变化，全面改写了书中内容，做到既能\u201c瞻前\u201d也能\u201c顾后\u201d。本书层次鲜明、结构严谨、内容翔实，特别是在最后几章，作者将前面讲述的内容应用到了10个引人入胜的项目中，并以模板的形式介绍了项目的开发过程。本书既适合初学者夯实基础，又能帮助Python程序员提升技能，即使是 Python方面的技术专家，也能从书里找到令你耳目一新的东西。","series":{"id":"660","title":"图灵程序设计丛书"},"price":"69.00元"},{"rating":{"max":10,"numRaters":414,"average":"8.5","min":0},"subtitle":"","author":["Wes McKinney"],"pubdate":"2013-11-18","tags":[{"count":775,"name":"数据分析","title":"数据分析"},{"count":618,"name":"python","title":"python"},{"count":290,"name":"Python","title":"Python"},{"count":226,"name":"数据挖掘","title":"数据挖掘"},{"count":216,"name":"编程","title":"编程"},{"count":154,"name":"数据分析/挖掘","title":"数据分析/挖掘"},{"count":137,"name":"计算机","title":"计算机"},{"count":99,"name":"机器学习","title":"机器学习"}],"origin_title":"Python for Data Analysis","image":"https://img3.doubanio.com/mpic/s27275372.jpg","binding":"平装","translator":["唐学韬"],"catalog":"目录\n前言 1\n第1章 准备工作 5\n本书主要内容 5\n为什么要使用Python进行数据分析 6\n重要的Python库 7\n安装和设置 10\n社区和研讨会 16\n使用本书 16\n致谢 18\n第2章 引言 20\n来自bit.ly的1.usa.gov数据 21\nMovieLens 1M数据集 29\n1880\u20142010年间全美婴儿姓名 35\n小结及展望 47\n第3章 IPython：一种交互式计算和开发环境 48\nIPython基础 49\n内省 51\n使用命令历史 60\n与操作系统交互 63\n软件开发工具 66\nIPython HTML Notebook 75\n利用IPython提高代码开发效率的几点提示 77\n高级IPython功能 79\n致谢 81\n第4章 NumPy基础：数组和矢量计算 82\nNumPy的ndarray：一种多维数组对象 83\n通用函数：快速的元素级数组函数 98\n利用数组进行数据处理 100\n用于数组的文件输入输出 107\n线性代数 109\n随机数生成 111\n范例：随机漫步 112\n第5章 pandas入门 115\npandas的数据结构介绍 116\n基本功能 126\n汇总和计算描述统计 142\n处理缺失数据 148\n层次化索引 153\n其他有关pandas的话题 158\n第6章 数据加载、存储与文件格式 162\n读写文本格式的数据 162\n二进制数据格式 179\n使用HTML和Web API 181\n使用数据库 182\n第7章 数据规整化：清理、转换、合并、重塑 186\n合并数据集 186\n重塑和轴向旋转 200\n数据转换 204\n字符串操作 217\n示例：USDA食品数据库 224\n第8章 绘图和可视化 231\nmatplotlib API入门 231\npandas中的绘图函数 244\n绘制地图：图形化显示海地地震危机数据 254\nPython图形化工具生态系统 260\n第9章 数据聚合与分组运算 263\nGroupBy技术 264\n数据聚合 271\n分组级运算和转换 276\n透视表和交叉表 288\n示例：2012联邦选举委员会数据库 291\n第10章 时间序列 302\n日期和时间数据类型及工具 303\n时间序列基础 307\n日期的范围、频率以及移动 311\n时区处理 317\n时期及其算术运算 322\n重采样及频率转换 327\n时间序列绘图 334\n移动窗口函数 337\n性能和内存使用方面的注意事项 342\n第11章 金融和经济数据应用 344\n数据规整化方面的话题 344\n分组变换和分析 355\n更多示例应用 361\n第12章 NumPy高级应用 368\nndarray对象的内部机理 368\n高级数组操作 370\n广播 378\nufunc高级应用 383\n结构化和记录式数组 386\n更多有关排序的话题 388\nNumPy的matrix类 393\n高级数组输入输出 395\n性能建议 397\n附录A Python语言精要 401","pages":"464","images":{"small":"https://img3.doubanio.com/spic/s27275372.jpg","large":"https://img3.doubanio.com/lpic/s27275372.jpg","medium":"https://img3.doubanio.com/mpic/s27275372.jpg"},"alt":"https://book.douban.com/subject/25779298/","id":"25779298","publisher":"机械工业出版社","isbn10":"7111436733","isbn13":"9787111436737","title":"利用Python进行数据分析","url":"https://api.douban.com/v2/book/25779298","alt_title":"Python for Data Analysis","author_intro":"Wes McKinney 资深数据分析专家，对各种Python库（包括NumPy、pandas、matplotlib以及IPython等）等都有深入研究，并在大量的实践中积累了丰富的经验。撰写了大量与Python数据分析相关的经典文章，被各大技术社区争相转载，是Python和开源技术社区公认的权威人物之一。开发了用于数据分析的著名开源Python库\u2014\u2014pandas，广获用户好评。在创建Lambda Foundry（一家致力于企业数据分析的公司）之前，他曾是AQR Capital Management的定量分析师。","summary":"【名人推荐】\n\u201c科学计算和数据分析社区已经等待这本书很多年了：大量具体的实践建议，以及大量综合应用方法。本书在未来几年里肯定会成为Python领域中技术计算的权威指南。\u201d\n\u2014\u2014Fernando Pérez　加州大学伯克利分校 研究科学家， IPython的创始人之一\n【内容简介】\n还在苦苦寻觅用Python控制、处理、整理、分析结构化数据的完整课程？本书含有大量的实践案例，你将学会如何利用各种Python库（包括NumPy、pandas、matplotlib以及IPython等）高效地解决各式各样的数据分析问题。\n由于作者Wes McKinney是pandas库的主要作者，所以本书也可以作为利用Python实现数据密集型应用的科学计算实践指南。本书适合刚刚接触Python的分析人员以及刚刚接触科学计算的Python程序员。\n\u2022将IPython这个交互式Shell作为你的首要开发环境。\n\u2022学习NumPy（Numerical Python）的基础和高级知识。\n\u2022从pandas库的数据分析工具开始。\n\u2022利用高性能工具对数据进行加载、清理、转换、合并以及重塑。\n\u2022利用matplotlib创建散点图以及静态或交互式的可视化结果。\n\u2022利用pandas的groupby功能对数据集进行切片、切块和汇总操作。\n\u2022处理各种各样的时间序列数据。\n\u2022通过详细的案例学习如何解决Web分析、社会科学、金融学以及经\u2022济学等领域的问题。","price":"89.00"},{"rating":{"max":10,"numRaters":1347,"average":"7.7","min":0},"subtitle":"","author":["[美]Wesley J. Chun（陳仲才）"],"pubdate":"2008-06","tags":[{"count":1355,"name":"Python","title":"Python"},{"count":624,"name":"编程","title":"编程"},{"count":266,"name":"计算机","title":"计算机"},{"count":256,"name":"程序语言","title":"程序语言"},{"count":188,"name":"python","title":"python"},{"count":181,"name":"程序设计","title":"程序设计"},{"count":169,"name":"programming","title":"programming"},{"count":106,"name":"开发","title":"开发"}],"origin_title":"Core Python Programming, 2nd Edition","image":"https://img5.doubanio.com/mpic/s3140466.jpg","binding":"平装","translator":["CPUG"],"catalog":"第1部分　Python核心\n第1章　欢迎来到Python世界\n1.1　什么是Python\n1.2　起源\n1.3　特点\n1.3.1　高级\n1.3.2　面向对象\n1.3.3　可升级\n1.3.4　可扩展\n1.3.5　可移植性\n1.3.6　易学\n1.3.7　易读\n1.3.8　易维护\n1.3.9　健壮性\n1.3.10　高效的快速原型开发工具\n1.3.11　内存管理器\n1.3.12　解释性和（字节）编译性\n1.4　下载和安装Python\n1.5　运行Python\n1.5.1　命令行上的交互式解释器\n1.5.2　从命令行启动脚本\n1.5.3　集成开发环境\n1.5.4　其他的集成开发环境和执行环境\n1.6　Python文档\n1.7　比较Python（Python与其他语言的比较）\n1.8　其他实现\n1.9　练习\n第2章　快速入门\n2.1　程序输出，print语句及\u201cHello World!\u201d\n2.2　程序输入和raw_input（）内建函数\n2.3　注释\n2.4　操作符\n2.5　变量和赋值\n2.6　数字\n2.7　字符串\n2.8　列表和元组\n2.9　字典\n2.10　代码块及缩进对齐\n2.11　if语句\n2.12　while循环\n2.13　for循环和range（）内建函数\n2.14　列表解析\n2.15　文件和内建函数open（）、file（）\n2.16　错误和异常\n2.17　函数\n2.17.1　如何定义函数\n2.17.2　如何调用函数\n2.17.3　默认参数\n2.18　类\n2.19　模块\n2.19.1　如何导入模块\n2.19.2　如何访问一个模块函数或访问一个模块变量\n2.20　实用的函数\n2.21　练习\n第3章　Python基础\n3.1　语句和语法\n3.1.1　注释（#）\n3.1.2　继续（\\）\n3.1.3　多个语句构成代码组（:）\n3.1.4　代码组由不同的缩进分隔\n3.1.5　同一行书写多个语句（;）\n3.1.6　模块\n3.2　变量赋值\n3.2.1　赋值操作符\n3.2.2　增量赋值\n3.2.3　多重赋值\n3.2.4　\u201c多元\u201d赋值\n3.3　标识符\n3.3.1　合法的Python标识符\n3.3.2　关键字\n3.3.3　内建\n3.3.4　专用下划线标识符\n3.4　基本风格指南\n3.4.1　模块结构和布局\n3.4.2　在主程序中书写测试代码\n3.5　内存管理\n3.5.1　变量定义\n3.5.2　动态类型\n3.5.3　内存分配\n3.5.4　引用计数\n3.5.5　垃圾收集\n3.6　第一个Python程序\n3.7　相关模块和开发工具\n3.8　练习\n第4章　Python对象\n4.1　Python 对象\n4.2　标准类型\n4.3　其他内建类型\n4.3.1　类型对象和type类型对象\n4.3.2　None--Python的Null对象\n4.4　内部类型\n4.4.1　代码对象\n4.4.2　帧对象\n4.4.3　跟踪记录对象\n4.4.4　切片对象\n4.4.5　省略对象\n4.4.6　XRange 对象\n4.5　标准类型操作符\n4.5.1　对象值的比较\n4.5.2　对象身份比较\n4.5.3　布尔类型\n4.6　标准类型内建函数\n4.6.1　type（）\n4.6.2　cmp（）\n4.6.3　str（）和repr（）（及``操作符）\n4.6.4　type（）和isinstance（）\n4.6.5　Python类型操作符和内建函数总结\n4.7　类型工厂函数\n4.8　标准类型的分类\n4.8.1　存储模型\n4.8.2　更新模型\n4.8.3　访问模型\n4.9　不支持的类型\n4.10　练习\n第5章　数字\n5.1　数字简介\n5.1.1　如何创建数值对象并用其赋值（数字对象）\n5.1.2　如何更新数字对象\n5.1.3　如何删除数字对象\n5.2　整型\n5.2.1　布尔型\n5.2.2　标准整型\n5.2.3　长整型\n5.2.4　整型和长整型的统一\n5.3　双精度浮点型\n5.4　复数\n5.5　操作符\n5.5.1　混合模式操作符\n5.5.2　标准类型操作符\n5.5.3　算术操作符\n5.5.4　*位操作符（只适用于整型）\n5.6　内建函数与工厂函数\n5.6.1　标准类型函数\n5.6.2　数字类型函数\n5.6.3　仅用于整型的函数\n5.7　其他数字类型\n5.7.1　布尔\u201c数\u201d\n5.7.2　十进制浮点型\n5.8　相关模块\n5.9　练习\n第6章　序列：字符串、列表和元组\n6.1　序列\n6.1.1　标准类型操作符\n6.1.2　序列类型操作符\n6.1.3　内建函数（BIF）\n6.2　字符串\n6.3　字符串和操作符\n6.3.1　标准类型操作符\n6.3.2　序列操作符切片（[]和[:]）\n6.4　只适用于字符串的操作符\n6.4.1　格式化操作符（％）\n6.4.2　字符串模板: 更简单的替代品\n6.4.3　原始字符串操作符（r/R）\n6.4.4　Unicode字符串操作符（u/U）\n6.5　内建函数\n6.5.1　标准类型函数\n6.5.2　序列类型函数\n6.5.3　字符串类型函数\n6.6　字符串内建函数\n6.7　字符串的独特特性\n6.7.1　特殊字符串和控制字符\n6.7.2　三引号\n6.7.3　字符串不变性\n6.8　Unicode\n6.8.1　术语\n6.8.2　什么是Unicode\n6.8.3　怎样使用Unicode\n6.8.4　Codec是什么\n6.8.5　编码解码\n6.8.6　把Unicode应用到实际应用中\n6.8.7　从现实中得来的教训\n6.8.8　Python的Unicode支持\n6.9　相关模块\n6.10　字符串关键点总结\n6.11　列表\n6.12　操作符\n6.12.1　标准类型操作符\n6.12.2　序列类型操作符\n6.12.3　列表类型操作符和列表解析\n6.13　内建函数\n6.13.1　标准类型函数\n6.13.2　序列类型函数\n6.13.3　列表类型内建函数\n6.14　列表类型的内建函数\n6.15　列表的特殊特性\n6.16　元组\n6.17　元组操作符和内建函数\n6.17.1　标准类型操作符、序列类型操作符和内建函数\n6.17.2　元组类型操作符和内建函数、内建方法\n6.18　元组的特殊特性\n6.18.1　不可变性给元组带来了什么影响\n6.18.2　元组也不是那么\u201c不可变\u201d\n6.18.3　默认集合类型\n6.18.4　单元素元组\n6.18.5　字典的关键字\n6.19　相关模块\n6.20　*拷贝Python对象、浅拷贝和深拷贝\n6.21　序列类型小结\n6.22　练习\n第7章　映像和集合类型\n7.1　映射类型：字典\n7.1.1　如何创建字典和给字典赋值\n7.1.2　如何访问字典中的值\n7.1.3　如何更新字典\n7.1.4　如何删除字典元素和字典\n7.2　映射类型操作符\n7.2.1　标准类型操作符\n7.2.2　映射类型操作符\n7.3　映射类型的内建函数和工厂函数\n7.3.1　标准类型函数[type（）、str（）和cmp（）]\n7.3.2　映射类型相关的函数\n7.4　映射类型内建方法\n7.5　字典的键\n7.5.1　不允许一个键对应多个值\n7.5.2　键必须是可哈希的\n7.6　集合类型\n7.6.1　如何创建集合类型和给集合赋值\n7.6.2　如何访问集合中的值\n7.6.3　如何更新集合\n7.6.4　如何删除集合中的成员和集合\n7.7　集合类型操作符\n7.7.1　标准类型操作符（所有的集合类型）\n7.7.2　集合类型操作符（所有的集合类型）\n7.7.3　集合类型操作符（仅适用于可变集合）\n7.8　内建函数\n7.8.1　标准类型函数\n7.8.2　集合类型工厂函数\n7.9　集合类型内建方法\n7.9.1　方法（所有的集合方法）\n7.9.2　方法（仅适用于可变集合）\n7.9.3　操作符和内建方法比较\n7.10　集合类型总结表\n7.11　相关模块\n7.12　练习\n第8章　条件和循环\n8.1　if语句\n8.1.1　多重条件表达式\n8.1.2　单一语句的代码块\n8.2　else语句\n8.3　elif（即else-if）语句\n8.4　条件表达式（即\u201c三元操作符\u201d）\n8.5　while语句\n8.5.1　一般语法\n8.5.2　计数循环\n8.5.3　无限循环\n8.6　for语句\n8.6.1　一般语法\n8.6.2　用于序列类型\n8.6.3　用于迭代器类型\n8.6.4　range（）内建函数\n8.6.5　xrange（） 内建函数\n8.6.6　与序列相关的内建函数\n8.7　break语句\n8.8　continue语句\n8.9　pass语句\n8.10　再谈else语句\n8.11　迭代器和iter（）函数\n8.11.1　什么是迭代器\n8.11.2　为什么要迭代器\n8.11.3　如何迭代\n8.11.4　使用迭代器\n8.11.5　可变对象和迭代器\n8.11.6　如何创建迭代器\n8.12　列表解析\n8.13　生成器表达式\n8.14　相关模块\n8.15　练习\n第9章　文件和输入输出\n9.1　文件对象\n9.2　文件内建函数（open（）和file（））\n9.2.1　工厂函数file（）\n9.2.2　通用换行符支持（UNS）\n9.3　文件内建方法\n9.3.1　输入\n9.3.2　输出\n9.3.3　文件内移动\n9.3.4　文件迭代\n9.3.5　其他\n9.3.6　文件方法杂项\n9.4　文件内建属性\n9.5　标准文件\n9.6　命令行参数\n9.7　文件系统\n9.8　文件执行\n9.9　永久存储模块\n9.9.1　pickle和marshal模块\n9.9.2　DBM风格的模块\n9.9.3　shelve模块\n9.10　相关模块\n9.11　练习\n第10章　错误和异常\n10.1　什么是异常\n10.1.1　错误\n10.1.2　异常\n10.2　Python 中的异常\n10.3　检测和处理异常\n10.3.1　try-except语句\n10.3.2　包装内建函数\n10.3.3　带有多个except的try语句\n10.3.4　处理多个异常的except语句\n10.3.5　捕获所有异常\n10.3.6　\u201c异常参数\u201d\n10.3.7　在应用使用我们封装的函数\n10.3.8　else子句\n10.3.9　finally子句\n10.3.10　try-finally语句\n10.3.11　try-except-else-finally：厨房一锅端\n10.4　上下文管理\n10.4.1　with语句\n10.4.2　*上下文管理协议\n10.5　*字符串作为异常\n10.6　触发异常\n10.7　断言\n10.8　标准异常\n10.9　*创建异常\n10.10　（现在）为什么用异常\n10.11　到底为什么要异常\n10.12　异常和sys模块\n10.13　相关模块\n10.14　练习\n第11章　函数和函数式编程\n11.1　什么是函数？\n11.1.1　函数vs过程\n11.1.2　返回值与函数类型\n11.2　调用函数\n11.2.1　函数操作符\n11.2.2　关键字参数\n11.2.3　默认参数\n11.2.4　参数组\n11.3　创建函数\n11.3.1　def语句\n11.3.2　声明与定义比较\n11.3.3　前向引用\n11.3.4　函数属性\n11.3.5　内部/内嵌函数\n11.3.6　*函数（与方法）装饰器\n11.4　传递函数\n11.5　Formal Arguments\n11.5.1　位置参数\n11.5.2　默认参数\n11.6　可变长度的参数\n11.6.1　非关键字可变长参数（元组）\n11.6.2　关键字变量参数（字典）\n11.6.3　调用带有可变长参数对象函数\n11.7　函数式编程\n11.7.1　匿名函数与lambda\n11.7.2　内建函数apply（）、filter（）、map（）、reduce（）\n11.7.3　偏函数应用\n11.8　变量作用域\n11.8.1　全局变量与局部变量\n11.8.2　globa语句\n11.8.3　作用域的数字\n11.8.4　闭包\n11.8.5　作用域和lambda\n11.8.6　变量作用域和名称空间\n11.9　*递归\n11.10　生成器\n11.10.1　简单的生成器特性\n11.10.2　加强的生成器特性\n11.11　练习\n第12章　模块\n12.1　什么是模块\n12.2　模块和文件\n12.2.1　模块名称空间\n12.2.2　搜索路径和路径搜索\n12.3　名称空间\n12.3.1　名称空间与变量作用域比较\n12.3.2　名称查找、确定作用域、覆盖\n12.3.3　无限制的名称空间\n12.4　导入模块\n12.4.1　import语句\n12.4.2　from-import语句\n12.4.3　多行导入\n12.4.4　扩展的import语句（as）\n12.5　模块导入的特性\n12.5.1　载入时执行模块\n12.5.2　导入（import）和加载（load）\n12.5.3　导入到当前名称空间的名称\n12.5.4　被导入到导入者作用域的名字\n12.5.5　关于__future__\n12.5.6　警告框架\n12.5.7　从ZIP文件中导入模块\n12.5.8　\u201c新的\u201d导入钩子\n12.6　模块内建函数\n12.6.1　__import__（）\n12.6.2　globals（）和locals（）\n12.6.3　reload（）\n12.7　包\n12.7.1　目录结构\n12.7.2　使用from-import导入包\n12.8　模块的其他特性\n12.8.1　自动载入的模块\n12.8.2　阻止属性导入\n12.8.3　不区分大小的导入\n12.8.4　源代码编码\n12.8.5　导入循环\n12.8.6　模块执行\n12.9　相关模块\n12.10　练习\n第13章　面向对象编程\n13.1　引言\n13.2　面向对象编程\n13.2.1　面向对象设计与面向对象编程的关系\n13.2.2　现实中的问题\n13.2.3　*常用术语\n13.3　类\n13.3.1　创建类\n13.3.2　声明与定义\n13.4　类属性\n13.4.1　类的数据属性\n13.4.2　Methods\n13.4.3　决定类的属性\n13.4.4　特殊的类属性\n13.5　实例\n13.5.1　初始化：通过调用类对象来创建实例\n13.5.2　__init__（）\u201c构造器\u201d方法\n13.5.3　__new__（）\u201c构造器\u201d方法\n13.5.4　__del__（）\u201c解构器\u201d方法\n13.6　实例属性\n13.6.1　\u201c实例化\u201d实例属性（或创建一个更好的构造器）\n13.6.2　查看实例属性\n13.6.3　特殊的实例属性\n13.6.4　建类型属性\n13.6.5　实例属性vs类属性\n13.7　绑定和方法调用\n13.7.1　调用绑定方法\n13.7.2　调用非绑定方法\n13.8　静态方法和类方法\n13.8.1　staticmethod（）和classmethod（）内建函数\n13.8.2　使用函数修饰符\n13.9　组合\n13.10　子类和派生\n13.11　继承\n13.11.1　__bases__类属性\n13.11.2　通过继承覆盖方法\n13.11.3　从标准类型派生\n13.11.4　多重继承\n13.12　类、实例和其他对象的内建函数\n13.12.1　issubclass（）\n13.12.2　isinstance（）\n13.12.3　hasattr（）、getattr（）、setattr（）、delattr（）\n13.12.4　dir（）\n13.12.5　super（）\n13.12.6　vars（）\n13.13　用特殊方法定制类\n13.13.1　简单定制（RoundFloat2）\n13.13.2　数值定制（Time60）\n13.13.3　迭代器（RandSeq和AnyIter）\n13.13.4　*多类型定制（NumStr）\n13.14　私有化\n13.15　*授权\n13.15.1　包装\n13.15.2　实现授权\n13.16　新式类的高级特性（Python 2.2+）\n13.16.1　新式类的通用特性\n13.16.2　__slots__类属性\n13.16.3　__getattribute__（）特殊方法\n13.16.4　描述符\n13.16.5　元类和__metaclass__\n13.17　相关模块和文档\n13.18　练习\n第14章　执行环境\n14.1　可调用对象\n14.1.1　函数\n14.1.2　方法\n14.1.3　类\n14.1.4　类的实例\n14.2　代码对象\n14.3　可执行的对象声明和内建函数\n14.3.1　callable（）\n14.3.2　compile（）\n14.3.3　eval（）\n14.3.4　exec\n14.3.5　input（）\n14.3.6　使用Python在运行时生成和执行Python代码\n14.4　执行其他（Python）程序\n14.4.1　导入\n14.4.2　execfile（）\n14.4.3　将模块作为脚本执行\n14.5　执行其他（非Python）程序\n14.5.1　os.system（）\n14.5.2　os.popen（）\n14.5.3　os.fork（）、os.exec*（）、os.wait*（）\n14.5.4　os.spawn*（）\n14.5.5　subprocess 模块\n14.5.6　相关函数\n14.6　受限执行\n14.7　结束执行\n14.7.1　sys.exit（） and SystemExit\n14.7.2　sys.exitfunc（）\n14.7.3　os._exit（） 函数\n14.7.4　os.kill（） Function\n14.8　各种操作系统接口\n14.9　相关模块\n14.10　练习\n第2部分　高级主题\n第15章　正则表达式\n15.1　引言/动机\n15.2　正则表达式使用的特殊符号和字符\n15.2.1　用管道符号（|）匹配多个正则表达式模式\n15.2.2　匹配任意一个单个的字符（.）\n15.2.3　从字符串的开头或结尾或单词边界开始匹配（^/$ /\\b /\\B ）\n15.2.4　创建字符类（[]）\n15.2.5　指定范围（-）和否定（^）\n15.2.6　使用闭包操作符（*，+，?，{}）实现多次出现/重复匹配\n15.2.7　特殊字符表示、字符集\n15.2.8　用圆括号（（））组建组\n15.3　正则表达式和Python语言\n15.3.1　re模块：核心函数和方法\n15.3.2　使用compile（）编译正则表达式\n15.3.3　匹配对象和group（）、groups（）方法\n15.3.4　用match（）匹配字符串\n15.3.5　search（）在一个字符串中查找一个模式（搜索与匹配的比较）\n15.3.6　匹配多个字符串（|）\n15.3.7　匹配任意单个字符（.）\n15.3.8　创建字符集合（[]）\n15.3.9　重复、特殊字符和子组\n15.3.10　从字符串的开头或结尾匹配及在单词边界上的匹配\n15.3.11　用findall（）找到每个出现的匹配部分\n15.3.12　用sub（）（和subn（））进行搜索和替换\n15.3.13　用split（）分割（分隔模式）\n15.4　正则表达式示例\n15.4.1　匹配一个字符串\n15.4.2　搜索与匹配的比较，\u201c贪婪\u201d匹配\n15.5　练习\n第16章　网络编程\n16.1　引言\n16.1.1　什么是客户端/服务器架构\n16.1.2　客户端/服务器网络编程\n16.2　套接字：通信端点\n16.2.1　什么是套接字\n16.2.2　套接字地址：主机与端口\n16.2.3　面向连接与无连接\n16.3　Python中的网络编程\n16.3.1　socket（）模块函数\n16.3.2　套接字对象（内建）方法\n16.3.3　创建一个TCP服务器\n16.3.4　创建TCP客户端\n16.3.5　运行我们的客户端与TCP服务器\n16.3.6　创建一个UDP服务器\n16.3.7　创建一个UDP客户端\n16.3.8　执行UDP服务器和客户端\n16.3.9　Socket模块属性\n16.4　*SocketServer模块\n16.4.1　创建一个SocketServerTCP服务器\n16.4.2　创建SocketServerTCP客户端\n16.4.3　执行TCP服务器和客户端\n16.5　Twisted框架介绍\n16.5.1　创建一个Twisted Reactor TCP服务器\n16.5.2　创建一个Twisted Reactor TCP客户端\n16.5.3　执行TCP服务器和客户端\n16.6　相关模块\n16.7　练习\n第17章　网络客户端编程\n17.1　什么是因特网客户端\n17.2　文件传输\n17.2.1　文件传输网际协议\n17.2.2　文件传输协议（FTP）\n17.2.3　Python和FTP\n17.2.4　ftplib.FTP类方法\n17.2.5　交互式FTP示例\n17.2.6　客户端FTP程序举例\n17.2.7　FTP的其他方面\n17.3　网络新闻\n17.3.1　Usenet与新闻组\n17.3.2　网络新闻传输协议（NNTP）\n17.3.3　Python和NNTP\n17.3.4　nntplib.NNTP类方法\n17.3.5　交互式NNTP举例\n17.3.6　客户端程序NNTP举例\n17.3.7　NNTP的其他方面\n17.4　电子邮件\n17.4.1　电子邮件系统组件和协议\n17.4.2　发送电子邮件\n17.4.3　Python和SMTP\n17.4.4　smtplib.SMTP类方法\n17.4.5　交互式SMTP示例\n17.4.6　SMTP的其他方面\n17.4.7　接收电子邮件\n17.4.8　POP和IMAP\n17.4.9　Python和POP3\n17.4.10　交互式POP3举例\n17.4.11　poplib.POP3类方法\n17.4.12　客户端程序SMTP和POP3举例\n17.5　相关模块\n17.5.1　电子邮件\n17.5.2　其他网络协议\n17.6　练习\n第18章　多线程编程\n18.1　引言/动机\n18.2　线程和进程\n18.2.1　什么是进程\n18.2.2　什么是线程\n18.3　Python、线程和全局解释器锁\n18.3.1　全局解释器锁（GIL）\n18.3.2　退出线程\n18.3.3　在Python中使用线程\n18.3.4　没有线程支持的情况\n18.3.5　Python的threading模块\n18.4　thread模块\n18.5　threading模块\n18.5.1　Thread类\n18.5.2　斐波那契、阶乘和累加和\n18.5.3　threading模块中的其他函数\n18.5.4　生产者-消费者问题和Queue模块\n18.6　相关模块\n18.7　练习\n第19章　图形用户界面编程\n19.1　简介\n19.1.1　什么是Tcl、Tk和Tkinter\n19.1.2　安装和使用Tkinter　533\n19.1.3　客户端/服务器架构　534\n19.2　Tkinter与Python编程　534\n19.2.1　Tkinter模块：把Tk引入你的程序\n19.2.2　GUI程序开发简介\n19.2.3　顶层窗口：Tkinter.Tk（）\n19.2.4　Tk组件\n19.3　Tkinter举例\n19.3.1　标签组件\n19.3.2　按钮组件\n19.3.3　标签和按钮组件\n19.3.4　标签、按钮和进度条组件\n19.3.5　偏函数应用举例\n19.3.6　中级Tkinter范例\n19.4　其他GUI简介\n19.4.1　Tk Interface eXtensions （Tix）\n19.4.2　Python MegaWidgets （PMW）\n19.4.3　wxWidgets和wxPython\n19.4.4　GTK+和PyGTK\n19.5　相关模块和其他GUI\n19.6　练习\n第20章　Web编程\n20.1　介绍\n20.1.1　Web应用：客户端/服务器计算\n20.1.2　因特网\n20.2　使用Python进行Web应用：创建一个简单的Web客户端\n20.2.1　统一资源定位符\n20.2.2　urlparse模块\n20.2.3　urllib模块\n20.2.4　urllib2模块\n20.3　高级Web客户端\n20.4　CGI：帮助Web服务器处理客户端数据\n20.4.1　CGI介绍\n20.4.2　CGI应用程序\n20.4.3　cgi模块\n20.5　建立CGI应用程序\n20.5.1　建立Web服务器\n20.5.2　建立表单页\n20.5.3　生成结果页\n20.5.4　生成表单和结果页面\n20.5.5　全面交互的Web站点\n20.6　在CGI中使用Unicode编码\n20.7　高级CGI\n20.7.1　Mulitipart表单提交和文件的上传\n20.7.2　多值字段\n20.7.3　cookie\n20.7.4　使用高级CGI\n20.8　Web（HTTP）服务器\n20.9　相关模块\n20.10　练习\n第21章　数据库编程\n21.1　介绍\n21.1.1　持久存储\n21.1.2　基本的数据库操作和SQL语言\n21.1.3　数据库和Python\n21.2　Python数据库应用程序程序员接口（DB-API）\n21.2.1　模块属性\n21.2.2　连接对象\n21.2.3　游标对象\n21.2.4　类型对象和构造器\n21.2.5　关系数据库\n21.2.6　数据库和Python：接口程序\n21.2.7　使用数据库接口程序举例\n21.3　对象-关系管理器（ORM）\n21.3.1　考虑对象，而不是SQL\n21.3.2　Python和ORM\n21.3.3　雇员数据库举例\n21.3.4　总结\n21.4　相关模块\n21.5　练习\n第22章　扩展Python　623\n22.1　引言/动机\n22.1.1　什么是扩展\n22.1.2　为什么要扩展Python\n22.2　创建Python扩展\n22.2.1　创建您的应用程序代码\n22.2.2　用样板来包装你的代码\n22.2.3　编译\n22.2.4　导入和测试\n22.2.5　引用计数\n22.2.6　线程和全局解释器锁（GIL）\n22.3　相关话题\n22.4　练习\n第23章　其他话题\n23.1　Web服务\n23.2　用Win32的COM来操作微软Office\n23.2.1　客户端COM编程\n23.2.2 微软Excel\n23.2.3　微软Word　第1部分　Python核心\n23.2.4　微软PowerPoint\n23.2.5　微软Outlook\n23.2.6　中等规模的例子\n23.3　用Jython写Python和Java的程序\n23.3.1　什么是Jython\n23.3.2　Swing GUI开发（Java或者Python!）\n23.4　练习\n23.2.4　微软PowerPoint\n23.2.5　微软Outlook\n23.2.6　中等规模的例子\n23.3　用Jython写Python和Java的程序\n23.3.1　什么是Jython\n23.3.2　Swing GUI开发（Java或者Python!）\n23.4　练习","pages":"654","images":{"small":"https://img5.doubanio.com/spic/s3140466.jpg","large":"https://img5.doubanio.com/lpic/s3140466.jpg","medium":"https://img5.doubanio.com/mpic/s3140466.jpg"},"alt":"https://book.douban.com/subject/3112503/","id":"3112503","publisher":"人民邮电出版社","isbn10":"711517850X","isbn13":"9787115178503","title":"Python核心编程（第二版）","url":"https://api.douban.com/v2/book/3112503","alt_title":"Core Python Programming, 2nd Edition","author_intro":"","summary":"本书是Python开发者的完全指南\u2014\u2014针对 Python 2.5全面升级\n·学习专业的Python风格、最佳实践和好的编程习惯；\n·加强对Python对象、内存模型和Python面向对象特性的深入理解；\n·构建更有效的Web、CGI、互联网、网络和其他客户端/服务器架构应用程序及软件；\n·学习如何使用Python中的Tkinter和其他工具来开发自己的GUI应用程序及软件；\n·通过用C等语言编写扩展来提升Python应用程序的性能，或者通过使用多线程增强I/0相关的应用程序的能力；\n·学习Python中有关数据库的API，以及如何在Python中使用各种不同的数据库系统，包括MySQL、Postgres和 SQLite。","price":"89.00元"},{"rating":{"max":10,"numRaters":1092,"average":"8.2","min":0},"subtitle":"","author":["Mark Pilgrim"],"pubdate":"19 July, 2004","tags":[{"count":924,"name":"Python","title":"Python"},{"count":312,"name":"编程","title":"编程"},{"count":201,"name":"programming","title":"programming"},{"count":140,"name":"计算机","title":"计算机"},{"count":98,"name":"程序设计","title":"程序设计"},{"count":72,"name":"入门","title":"入门"},{"count":70,"name":"脚本","title":"脚本"},{"count":69,"name":"程序语言","title":"程序语言"}],"origin_title":"","image":"https://img3.doubanio.com/mpic/s4180565.jpg","binding":"Paperback","translator":[],"catalog":"","pages":"414","images":{"small":"https://img3.doubanio.com/spic/s4180565.jpg","large":"https://img3.doubanio.com/lpic/s4180565.jpg","medium":"https://img3.doubanio.com/mpic/s4180565.jpg"},"alt":"https://book.douban.com/subject/1440658/","id":"1440658","publisher":"Apress","isbn10":"1590593561","isbn13":"9781590593561","title":"Dive Into Python","url":"https://api.douban.com/v2/book/1440658","alt_title":"","author_intro":"Mark Pilgrim is an accessibility architect in the IBM Emerging Technologies Group. He is the author of several technical books,\nincluding Dive Into Accessibility, a free online tutorial on web accessibility. He lives in North Carolina with his wife and newborn son, and spends his copious free time sunbathing, skydiving, and\nreading Immanuel Kant's Critique of Pure Reason.","summary":"Dive Into Python 是为有经验的程序员编写的一本 Python 书。","price":"$39.99"},{"rating":{"max":10,"numRaters":783,"average":"8.2","min":0},"subtitle":"（第3版）","author":["Mark Lutz"],"pubdate":"2009-8","tags":[{"count":834,"name":"python","title":"python"},{"count":370,"name":"编程","title":"编程"},{"count":168,"name":"计算机","title":"计算机"},{"count":168,"name":"Programming","title":"Programming"},{"count":167,"name":"Python","title":"Python"},{"count":142,"name":"编程语言","title":"编程语言"},{"count":126,"name":"O'Reilly","title":"O'Reilly"},{"count":120,"name":"入门","title":"入门"}],"origin_title":"Learning Python","image":"https://img1.doubanio.com/mpic/s3952568.jpg","binding":"平装","translator":["侯靖"],"catalog":"前言\n第一部分 使用入门第1章 问答环节\n人们为何使用Python\n软件质量\n开发者效率\nPython是\u201c脚本语言\u201d吗\n好吧,Python的缺点是什么呢\n如今谁在使用Python\n使用Python可以做些什么\n系统编程\n用户图形接口\nInternet脚本\n组件集成\n数据库编程\n快速原型\n数值计算和科学计算编程\n游戏.图像.人工智能.XML.机器人等\nPython有哪些技术上的优点\n面向对象\n免费\n可移植\n功能强大\n可混合\n使用简单\nPython是工程,不是艺术\n简单易学\n名字来源于MontyPython\nPython和其他语言比较起来怎么样\n本章小结\n头脑风暴\n本章习题\n习题解答\n第2章 Python如何运行程序.\nPython解释器简介\n程序执行\n程序员的视角\nPython的视角\n执行模块的变种\nPython实现的替代者\n执行优化工具\n冻结二进制文件\n未来的可能性\n本章小结\n头脑风暴\n本章习题\n习题解答\n第3章 如何运行程序\n交互模式下编写代码\n在交互提示模式下测试代码\n使用交互提示模式\n系统命令行和文件\n使用命令行和文件\nUNIX可执行脚本(#!)\nUNIXenv查找技巧\n点击文件图标\n在Windows中点击图标\nraw_input的技巧\n图标点击的其他限制\n模块导入和重载\n模块的显要特性：属性\nimport和reload的使用注意事项\nIDLE用户界面\nIDLE基础\n使用IDLE\n高级IDLE工具\n其他的IDE\n嵌入式调用\n动付二进制的可执行性\n文本编辑器启动的选择\n其他的启动选择\n未来的可能\n我应该选用哪种\n本章小结74..\n头脑风暴\n本章习题\n习题解答\n头脑风暴：第一部分 练习题\n第二部分 类型和运算第4章 介绍Python对象类型.\n为什么使用内置类型\nPython的核心数据类型\n数字\n字符串\n序列的操作\n不可变性\n类型特定的方法\n寻求帮助\n编写字符串的其他方法\n模式匹配\n列表\n序列操作\n类型特定的操作\n边界检查\n嵌套\n列表解析\n字典\n映射操作\n重访嵌套\n键的排序：for循环\n迭代和优化\n不存在的键：if测试\n元组\n为什么要用元组\n文件\n其他文件类工具\n其他核心类型\n如何破坏代码的灵活性\n用户定义的类\n剩余的内容\n本章小结\n头脑风暴\n本章习题\n习题解答\n第5章 数字\nPython的数字类型\n数字常量\n内置数学工具和扩展\nPython表达式操作符\n混合操作所遵循的操作符优先级.\n括号分组的子表达式\n混合类型自动升级\n预习：运算符重载\n在实际应用中的数字\n变量和基本的表达式\n数字显示的格式\nstr和repr显示格式\n除法：传统除法.Floor除法和真除法.\n位操作\n长整型数\n复数\n十六进制和八进制记数\n其他的内置数学工具\n其他数字类型\n小数数字\n集合\n布尔型\n第三方扩展\n本章小结\n头脑风暴\n本章习题\n习题解答\n第6章 动态类型简介.\n缺少类型声明语句的情况\n变量.对象和引用\n类型属于对象,而不是变量\n对象的垃圾收集\n共享引用\n共享引用和在原处修改\n共享引用和相等\n动态类型随处可见\n本章小结\n头脑风暴\n本章习题\n习题解答\n第7章 字符串\n字符串常量\n单双引号字符串是一样的\n用转义序列代表特殊字节\n字符串抑制转义\n三重引号编写多行字符串块\n字符串编码更大的字符集\n实际应用中的字符串\n基本操作\n索引和分片\n为什么要在意：分片\n字符串转换工具\n修改字符串\n字符串格式化\n更高级的字符串格式化\n基于字典的字符串格式化\n字符串方法\n字符串方法实例：修改字符串\n字符串方法实例：文本解析\n实际应用中的其他常见字符串方法\n最初的字符串模块\n通常意义下的类型分类\n同样分类的类型共享其操作集合\n可变类型能够在原处修改\n本章小结\n头脑风暴\n本章习题\n习题解答\n第8章 列表与字典.\n列表\n实际应用中的列表\n基本列表操作\n索引.分片和矩阵\n原处修改列表\n字典\n实际应用中的字典\n字典的基本操作\n原处修改字典\n其他字典方法\n语言表\n字典用法注意事项\n为什么要在意字典接口\n本章小结\n头脑风暴\n本章习题\n习题解答\n第9章 元组.文件及其他\n元组\n实际应用中的元组\n为什么有了列表还要元组\n文件\n打开文件\n使用文件\n实际应用中的文件\n其他文件工具\n重访类型分类\n为什么要在意操作符重载\n对象灵活性\n引用VS拷贝\n比较.相等性和真值\nPython中真和假的含义\nPython的类型层次\nPython中的其他类型\n内置类型陷阱\n赋值生成引用,而不是拷贝\n重复能够增加层次深度.\n留意循环数据结构\n不可变类型不可以在原处改变\n本章小结\n头脑风暴\n本章习题\n习题解答\n头脑风暴：第二部分 练习题\n第三部分 语句和语法第10章 Python语句简介.\n重访Python程序结构\nPython的语句\n两个if的故事\nPython增加了什么\nPython删除了什么\n终止行就是终止语句\n为什么使用缩进语法\n几个特殊实例\n简短实例：交互循环\n一个简单的交互式循环\n对用户输入数据做数学运算\n用测试输入数据来处理错误\n用try语句处理错误\n嵌套代码三层\n本章小结\n头脑风暴\n本章习题\n习题解答\n第11章 赋值.表达式和打印\n赋值语句\n赋值语句的形式\n序列赋值\n多目标赋值语句\n增强赋值语句\n变量命名规则\n表达式语句\n表达式语句和在原处的修改\n打印语句\nPython的\u201cHelloWorld\u201d程序\n重定向输出流\nprint〉〉file扩展\n本章小结\n头脑风暴\n本章习题\n习题解答\n第12章 if测试.\nif语句\n通用格式\n基本例子\n多路分支\nPython语法规则\n代码块分隔符\n语句的分隔符\n一些特殊情况\n真值测试\nif/else三元表达式\n为什么要在意布尔值\n本章小结\n头脑风暴\n本章习题\n习题解答\n第13章 while和for循环\nwhile循环\n一般格式\n例子\nbreak.continue.pass和循环else\n一般循环格式\n例子\n为什么要在意\u201c模拟C语言的while循环\u201d\nfor循环\n一般格式\n例子\n为什么要在意\u201c文件扫描\u201d\n迭代器：初探\n文件迭代器\n其他内置类型迭代器\n其他迭代环境\n用户定义的迭代器\n编写循环的技巧\n循环计数器：while和range\n非完备遍历：range\n修改列表：range\n并行遍历：zip和map\n产生偏移和元素：enumerate\n列表解析：初探\n列表解析基础\n对文件使用列表解析\n扩展列表解析语法\n本章小结\n头脑风暴\n本章习题\n习题解答\n第14章 文档\nPython文档资源\n#注释\ndir函数\n文档字符串：__doc__\nPyDoc：help函数\nPyDoc：HTML报表\n标准手册集\n网络资源\n已出版的书籍.\n常见编写代码的陷阱\n本章小结\n头脑风暴\n本章习题\n习题解答\n头脑风暴：第三部分 练习题\n第四部分 函数第15章 函数基础\n为何使用函数\n编写函数\ndef语句\ndef语句是实时执行的\n第一个例子：定义和调用\n定义\n调用\nPython中的多态\n第二个例子：寻找序列的交集\n定义\n调用\n重访多态\n本地变量\n本章小结\n头脑风暴\n本章习题\n习题解答\n第16章 作用域和参数\n作用域法则\n函数作用域基础\n变量名解析：LEGB原则\n作用域实例\n内置作用域\nglobal语句\n最小化全局变量\n最小化文件间的修改\n其他访问全局变量的方法\n作用域和嵌套函数\n嵌套作用域的细节\n嵌套作用域举例\n传递参数\n参数和共享引用\n避免可变参数的修改\n对参数输出进行模拟\n特定的参数匹配模型\n关键字参数和默认参数的实例\n任意参数的实例\n关键字参数和默认参数的混合\nmin调用\n一个更有用的例子：通用set函数\n参数匹配：细节\n为什么要在意：关键字参数\n本章小结\n头脑风暴\n本章习题\n习题解答\n第17章 函数的高级话题.\n匿名函数：lambda\nlambda表达式\n为什么使用lambda\n如何（不要）让Python代码变得晦涩难懂\n嵌套lambda和作用域\n作为参数来应用函数\n内置函数apply\n为什么要在意：回调\n传入关键字参数\n和apply类似的调用语法\n在序列中映射函数：map\n函数式编程工具：filter和reduce\n重访列表解析：映射\n列表解析基础\n增加测试和嵌套循环\n列表解析和矩阵\n理解列表解析\n为什么要在意：列表解析和map\n重访迭代器：生成器\n生成器函数实例\n扩展生成器函数协议：send和next\n迭代器和内置类型\n生成器表达式：迭代器遇到列表解析\n对迭代的各种方法进行计时\n函数设计概念\n函数是对象：简洁调用\n函数陷阱\n本地变量是静态检测的\n默认和可变对象\n没有return语句的函数\n嵌套作用域的循环变量\n本章小结\n头脑风暴\n本章习题\n习题解答\n头脑风暴：第四部分 练习题\n第五部分 模块第18章 模块：宏伟蓝图.\n为什么使用模块\nPython程序构架\n如何组织一个程序\n导入和属性\n标准库模块\nimport如何工作\n搜索\n编译（可选）\n运行\n第三方工具：distutils\n本章小结\n头脑风暴\n本章习题\n习题解答\n第19章 模块代码编写基础.\n模块的创建\n模块的使用\nimport语句\nfrom语句\nfrom*语句\n导入只发生一次\nimport和from是赋值语句\n文件间变量名的改变\nimport和from的对等性\nfrom语句潜在的陷阱\n模块命名空间\n文件生成命名空间\n属性名的点号运算\n导入和作用域\n命名空间的嵌套\n重载模块\nreload基础\nreload实例\n为什么要在意：模块重载\n本章小结\n头脑风暴\n本章习题\n习题解答\n第20章 模块包\n包导入基础\n包和搜索路径设置\n__init__.py包文件\n包导入实例\n包对应的from和import\n为什么要使用包导入\n三个系统的传说\n为什么要在意：模块包\n本章小结\n头脑风暴\n本章习题\n习题解答\n第21章高级模块话题\n在模块中隐藏数据\n最小化from*的破坏：_X和__all__.\n启用以后的语言特性\n混合用法模式：__name__和__main__\n以__name__进行单元测试\n修改模块搜索路径\nimportas扩展\n相对导入语法\n为什么使用相对导入\n模块设计理念\n模块是对象：元程序\n模块陷阱\n顶层代码的语句次序的重要性\n通过变量名字符串导入模块\nfrom复制变量名,而不是连接\nfrom*会让变量语义模糊\nreload不会影响from导入\nreload.from以及交互模式测试\nreload的使用没有传递性\n递归形式的fromimport无法工作\n本章小结\n头脑风暴\n本章习题\n习题解答\n头脑风暴：第五部分 练习题\n第六部分 类和OOP第22章OOP：宏伟蓝图\n为何使用类\n概览OOP\n属性继承搜索\n类和实例\n类方法调用\n编写类树\nOOP是为了代码重用\n本章小结\n头脑风暴\n本章习题\n习题解答\n第23章类代码编写基础.\n类产生多个实例对象\n类对象提供默认行为\n实例对象是具体的元素\n第一个例子\n类通过继承进行定制\n第二个例子\n类是模块内的属性\n类可以截获Python运算符\n第三个例子\n为什么要使用运算符重载\n世界上最简单的Python类\n本章小结\n头脑风暴\n本章习题\n习题解答\n第24章类代码编写细节.\nclass语句\n一般形式\n例子\n方法\n例子\n调用超类的构造器\n其他方法调用的可能性\n继承\n属性树的构造\n继承方法的专有化\n类接口技术\n抽象超类\n运算符重载\n常见的运算符重载方法\n__getitem__拦截索引运算\n__getitem__和__iter__实现迭代\n用户定义的迭代器\n__getattr__和__setattr__捕捉属性的引用\n模拟实例属性的私有性\n__repr__和__str__会返回字符串表达形式\n__radd__处理右侧加法\n__call__拦截调用\n函数接口和回调代码\n__del__是析构器\n命名空间：完整的内容\n简单变量名：如果赋值就不是全局变量\n属性名称：对象命名空间\nPython命名空间的\u201c禅\u201d：赋值将变量名分类\n命名空间字典\n命名空间链接\n一个更实际的例子\n本章小结\n头脑风暴\n本章习题\n习题解答\n第25章类的设计\nPython和OOP\n通过调用标记进行重载（或不要）\n类作为记录\n类和继承：\u201c是一个\u201d关系\n类和组合：\u201c有一个\u201d关系\n重访流处理器\n为什么要在意：类和持续性\nOOP和委托\n多重继承\n类是对象：通用对象的工厂\n为什么有工厂\n方法是对象：绑定或无绑定\n重访文档字符串\n为什么要在意：绑定方法和回调函数\n类和模块\n本章小结\n头脑风暴\n本章习题\n习题解答\n第26章类的高级主题\n扩展内置类型\n通过嵌入扩展类型\n通过子类扩展类型\n类的伪私有属性\n变量名压缩概览\n为什么使用伪私有属性\n新式类\n钻石继承变动\n其他新式类的扩展\n静态和类方法\n使用静态和类方法\n函数装饰器\n装饰器例子\n类陷阱\n修改类属性的副作用\n多重继承：顺序很重要\n类.方法以及嵌套作用域\n\u201c过度包装\u201d\n本章小结\n头脑风暴\n本章习题\n习题解答\n头脑风暴：第六部分 练习题\n第七部分 异常和工具第27章异常基础\n为什么使用异常\n异常的角色\n异常处理：简明扼要\ntry/except/else语句\ntry语句分句\ntry/else分句\n例子：默认行为\n例子：捕捉内置异常\ntry/finally语句\n例子：利用try/finally编写终止行为\n统一try/except/finally\n通过嵌套合并finally和except\n合并try的例子\nraise语句\n例子：引发并捕捉用户定义的异常\n例子：利用raise传入额外的数据\n例子：利用raise传递异常\nassert语句\n例子：收集约束条件（但不是错误）\nwith/as环境管理器\n基本使用\n环境管理协议\n为什么要在意：错误检查\n本章小结\n头脑风暴\n本章习题\n习题解答\n第28章异常对象\n基于字符串的异常\n字符串异常就要出局了\n基于类的异常\n类异常例子\n为什么使用类异常\n内置Exception类\n定义异常文本\n发送额外数据和实例行为\nraise语句的一般形式\n本章小结\n头脑风暴\n本章习题\n习题解答\n第29章异常的设计\n嵌套异常处理器\n例子：控制流程嵌套\n例子：语法嵌套化\n异常的习惯用法\n异常不总是错误\n函数信号条件和raise\n在try外进行调试\n运行进程中的测试\n关于sys.exc_info\n与异常有关的技巧\n应该包装什么\n捕捉太多：避免空except语句\n捕捉过少：使用基于类的分类\n异常陷阱\n字符串异常匹配是通过同一性而不是通过值\n捕捉到错误的异常\n核心语言总结\nPython工具集\n大型项目的开发工具\n本章小结\n头脑风暴\n本章习题\n习题解答\n头脑风暴：第七部分 练习题\n第八部分 附录\n附录A安装和配置\n附录B每部分练习题解答","pages":"656","images":{"small":"https://img1.doubanio.com/spic/s3952568.jpg","large":"https://img1.doubanio.com/lpic/s3952568.jpg","medium":"https://img1.doubanio.com/mpic/s3952568.jpg"},"alt":"https://book.douban.com/subject/3948354/","id":"3948354","publisher":"机械工业出版社","isbn10":"7111267761","isbn13":"9787111267768","title":"Python学习手册","url":"https://api.douban.com/v2/book/3948354","alt_title":"Learning Python","author_intro":"","summary":"《Python学习手册(第3版)》讲述了：Python可移植、功能强大、易于使用，是编写独立应用程序和脚本应用程序的理想选择。无论你是刚接触编程或者刚接触Python，通过学习《Python学习手册(第3版)》，你可以迅速高效地精通核心Python语言基础。读完《Python学习手册(第3版)》，你会对这门语言有足够的了解，从而可以在你所从事的任何应用领域中使用它。\n《Python学习手册(第3版)》是作者根据过去10年用于教学而广为人知的培训课程的材料编写而成的。除了有许多详实说明和每章小结之外，每章还包括一个头脑风暴：这是《Python学习手册(第3版)》独特的一部分，配合以实用的练习题和复习题，让读者练习新学的技巧并测试自己的理解程度。\n《Python学习手册(第3版)》包括：\n类型和操作\u2014\u2014深入讨论Python主要的内置对象类型：数字、列表和字典等。\n语句和语法\u2014\u2014在Python中输入代码来建立并处理对象，以及Python一般的语法模型。\n函数\u2014\u2014Python基本的面向过程工具，用于组织代码和重用。\n模块\u2014\u2014封装语句、函数以及其他工具，从而可以组织成较大的组件。\n类和OOP\u2014\u2014Python可选的面向对象编程工具，可用于组织程序代码从而实现定制和重用。\n异常和工具\u2014\u2014异常处理模型和语句，并介绍编写更大程序的开发工具。\n讨论Python 3.0。\n《Python学习手册(第3版)》让你对Python语言有深入而完整的了解，从而帮助你理解今后遇到的任何Python应用程序实例。如果你准备探索Google和YouTube为什么选中了Python，《Python学习手册(第3版)》就是你入门的最佳指南。","price":"89.00元"}]
     */

    private int count;
    private int start;
    private int total;
    private List<Book> books;

    public int getCount() {
        return count;
    }

    public void setCount(int count) {
        this.count = count;
    }

    public int getStart() {
        return start;
    }

    public void setStart(int start) {
        this.start = start;
    }

    public int getTotal() {
        return total;
    }

    public void setTotal(int total) {
        this.total = total;
    }

    public List<Book> getBooks() {
        return books;
    }

    public void setBooks(List<Book> books) {
        this.books = books;
    }

    }
